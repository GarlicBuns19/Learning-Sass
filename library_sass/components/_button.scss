// A mixin allows use to the same code somewhere else and mix it in other css via @include mixin_name
// @mixin name(parameter)
// @mixin name(parameter : default value)
@mixin btn($bg-color: rgb(205, 201, 201)) {
  text-decoration: none;
  cursor: pointer;
  display: inline-block;
  border: 0;
  padding: $base-padding $base-padding * 2;
  border-radius: $base-border-radius;
  background-color: $bg-color;
}

.btn {
  // No parameter used or () so it uses default value
  @include btn;
}

@each $key, $val in $colors {
  .btn-#{$key} {
    // use the mixin
    @include btn($val);
    &:hover {
      background-color: lighten($val, 5%);
    }
    // text-decoration: none;
    // cursor: pointer;
    // display: inline-block;
    // border: 0;
    // padding: $base-padding $base-padding * 2;
    // border-radius: $base-border-radius;

    // Removed because of parameter in mixin
    // background-color: $val;
  }
  .btn-outlined-#{$key} {
    // use the mixin
    @include btn(white);
    // text-decoration: none;
    // cursor: pointer;
    // display: inline-block;
    // border: 0;
    // padding: $base-padding $base-padding * 2;
    // border-radius: $base-border-radius;

    // Removed because of parameter in mixin
    // background-color: white;
    border: $base-border-thickness solid $val;
    &:hover {
      background-color: $val;
    }
  }
  .btn-complement-#{$key} {
    @include btn($val);
    color: light-comp($val);
    &:hover {
      color: $val;
      background-color: light-comp($val);
    }
  }
}
